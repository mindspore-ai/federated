# automatically generated by the FlatBuffers compiler, do not modify

# namespace: schema

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class RequestUpdateModel(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = RequestUpdateModel()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsRequestUpdateModel(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    @classmethod
    def RequestUpdateModelBufferHasIdentifier(cls, buf, offset, size_prefixed=False):
        return flatbuffers.util.BufferHasIdentifier(buf, offset, b"\x46\x4C\x4A\x30", size_prefixed=size_prefixed)

    # RequestUpdateModel
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # RequestUpdateModel
    def FlName(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RequestUpdateModel
    def FlId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RequestUpdateModel
    def Iteration(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RequestUpdateModel
    def FeatureMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from mindspore.fl.schema.FeatureMap import FeatureMap
            obj = FeatureMap()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RequestUpdateModel
    def FeatureMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RequestUpdateModel
    def FeatureMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # RequestUpdateModel
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # RequestUpdateModel
    def Signature(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # RequestUpdateModel
    def SignatureAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint8Flags, o)
        return 0

    # RequestUpdateModel
    def SignatureLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RequestUpdateModel
    def SignatureIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # RequestUpdateModel
    def UploadLoss(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RequestUpdateModel
    def Sign(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # RequestUpdateModel
    def IndexArray(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # RequestUpdateModel
    def IndexArrayAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # RequestUpdateModel
    def IndexArrayLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RequestUpdateModel
    def IndexArrayIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        return o == 0

    # RequestUpdateModel
    def CompressFeatureMap(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from mindspore_fl.schema.CompressFeatureMap import CompressFeatureMap
            obj = CompressFeatureMap()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RequestUpdateModel
    def CompressFeatureMapLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RequestUpdateModel
    def CompressFeatureMapIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        return o == 0

    # RequestUpdateModel
    def UploadCompressType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # RequestUpdateModel
    def UploadSparseRate(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RequestUpdateModel
    def NameVec(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # RequestUpdateModel
    def NameVecLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # RequestUpdateModel
    def NameVecIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        return o == 0

    # RequestUpdateModel
    def UploadAccuracy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # RequestUpdateModel
    def UnsupervisedEvalItems(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from mindspore_fl.schema.UnsupervisedEvalItems import UnsupervisedEvalItems
            obj = UnsupervisedEvalItems()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # RequestUpdateModel
    def SigndsBHat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def Start(builder): builder.StartObject(15)
def RequestUpdateModelStart(builder):
    """This method is deprecated. Please switch to Start."""
    return Start(builder)
def AddFlName(builder, flName): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(flName), 0)
def RequestUpdateModelAddFlName(builder, flName):
    """This method is deprecated. Please switch to AddFlName."""
    return AddFlName(builder, flName)
def AddFlId(builder, flId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(flId), 0)
def RequestUpdateModelAddFlId(builder, flId):
    """This method is deprecated. Please switch to AddFlId."""
    return AddFlId(builder, flId)
def AddIteration(builder, iteration): builder.PrependInt32Slot(2, iteration, 0)
def RequestUpdateModelAddIteration(builder, iteration):
    """This method is deprecated. Please switch to AddIteration."""
    return AddIteration(builder, iteration)
def AddFeatureMap(builder, featureMap): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(featureMap), 0)
def RequestUpdateModelAddFeatureMap(builder, featureMap):
    """This method is deprecated. Please switch to AddFeatureMap."""
    return AddFeatureMap(builder, featureMap)
def StartFeatureMapVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RequestUpdateModelStartFeatureMapVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartFeatureMapVector(builder, numElems)
def AddTimestamp(builder, timestamp): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)
def RequestUpdateModelAddTimestamp(builder, timestamp):
    """This method is deprecated. Please switch to AddTimestamp."""
    return AddTimestamp(builder, timestamp)
def AddSignature(builder, signature): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(signature), 0)
def RequestUpdateModelAddSignature(builder, signature):
    """This method is deprecated. Please switch to AddSignature."""
    return AddSignature(builder, signature)
def StartSignatureVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def RequestUpdateModelStartSignatureVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartSignatureVector(builder, numElems)
def AddUploadLoss(builder, uploadLoss): builder.PrependFloat32Slot(6, uploadLoss, 0.0)
def RequestUpdateModelAddUploadLoss(builder, uploadLoss):
    """This method is deprecated. Please switch to AddUploadLoss."""
    return AddUploadLoss(builder, uploadLoss)
def AddSign(builder, sign): builder.PrependInt32Slot(7, sign, 0)
def RequestUpdateModelAddSign(builder, sign):
    """This method is deprecated. Please switch to AddSign."""
    return AddSign(builder, sign)
def AddIndexArray(builder, indexArray): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(indexArray), 0)
def RequestUpdateModelAddIndexArray(builder, indexArray):
    """This method is deprecated. Please switch to AddIndexArray."""
    return AddIndexArray(builder, indexArray)
def StartIndexArrayVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RequestUpdateModelStartIndexArrayVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartIndexArrayVector(builder, numElems)
def AddCompressFeatureMap(builder, compressFeatureMap): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(compressFeatureMap), 0)
def RequestUpdateModelAddCompressFeatureMap(builder, compressFeatureMap):
    """This method is deprecated. Please switch to AddCompressFeatureMap."""
    return AddCompressFeatureMap(builder, compressFeatureMap)
def StartCompressFeatureMapVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RequestUpdateModelStartCompressFeatureMapVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartCompressFeatureMapVector(builder, numElems)
def AddUploadCompressType(builder, uploadCompressType): builder.PrependInt8Slot(10, uploadCompressType, 0)
def RequestUpdateModelAddUploadCompressType(builder, uploadCompressType):
    """This method is deprecated. Please switch to AddUploadCompressType."""
    return AddUploadCompressType(builder, uploadCompressType)
def AddUploadSparseRate(builder, uploadSparseRate): builder.PrependFloat32Slot(11, uploadSparseRate, 0.0)
def RequestUpdateModelAddUploadSparseRate(builder, uploadSparseRate):
    """This method is deprecated. Please switch to AddUploadSparseRate."""
    return AddUploadSparseRate(builder, uploadSparseRate)
def AddNameVec(builder, nameVec): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(nameVec), 0)
def RequestUpdateModelAddNameVec(builder, nameVec):
    """This method is deprecated. Please switch to AddNameVec."""
    return AddNameVec(builder, nameVec)
def StartNameVecVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def RequestUpdateModelStartNameVecVector(builder, numElems):
    """This method is deprecated. Please switch to Start."""
    return StartNameVecVector(builder, numElems)
def AddUploadAccuracy(builder, uploadAccuracy): builder.PrependFloat32Slot(13, uploadAccuracy, 0.0)
def RequestUpdateModelAddUploadAccuracy(builder, uploadAccuracy):
    """This method is deprecated. Please switch to AddUploadAccuracy."""
    return AddUploadAccuracy(builder, uploadAccuracy)
def AddUnsupervisedEvalItems(builder, unsupervisedEvalItems): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(unsupervisedEvalItems), 0)
def RequestUpdateModelAddUnsupervisedEvalItems(builder, unsupervisedEvalItems):
    """This method is deprecated. Please switch to AddUnsupervisedEvalItems."""
    return AddUnsupervisedEvalItems(builder, unsupervisedEvalItems)
def RequestUpdateModelAddSigndsBHat(builder, signdsBHat): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(signdsBHat), 0)
def End(builder): return builder.EndObject()
def RequestUpdateModelEnd(builder):
    """This method is deprecated. Please switch to End."""
    return End(builder)
