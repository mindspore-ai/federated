/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/6.3/userguide/java_library_plugin.html
 */

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.io.netifi:gradle-flatbuffers-plugin:1.0.7"
    }
}


plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

apply plugin: "io.netifi.flatbuffers"
apply plugin: "java"
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    // Use jcenter for resolving dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
    maven {
        url "https://maven.springframework.org/release"
    }
    maven {
        url "https://maven.restlet.com"
    }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

dependencies {
    // https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp
    implementation('com.squareup.okhttp3:okhttp:4.10.0')
    // https://mvnrepository.com/artifact/com.google.flatbuffers/flatbuffers-java
    implementation('com.google.flatbuffers:flatbuffers-java:2.0.3')
    implementation('org.bouncycastle:bcprov-jdk15to18:1.74')
    implementation files('libs/mindspore-lite-java.jar')

    // Use JUnit test framework
    testImplementation('com.squareup.okhttp3:mockwebserver:4.10.0')
    testImplementation('org.jmockit:jmockit:1.49')
    testImplementation('junit:junit:4.10')
    testImplementation('org.hamcrest:hamcrest-all:1.3')
    testImplementation('com.alibaba:fastjson:1.2.58')
    testImplementation('commons-io:commons-io:2.0.1')
    // the module jar for open source model test, need compile example quick_start_flclient
    testImplementation files('libs/quick_start_flclient.jar')
}


def getFlatVersion(path) {
    def version = new ByteArrayOutputStream()
    def cmd = path + ' --version'
    exec { ExecSpec execSpec ->
        executable 'bash'
        args '-c', cmd
        standardOutput = version
    }
    return version.toString().split()[2]
}

import io.netifi.flatbuffers.plugin.tasks.FlatBuffers

flatbuffers {
    String flatExePath = System.getenv("FLAT_EXE_PATH").toString()
    println('FLAT_EXE_PATH is : ' + flatExePath)
    if (file(flatExePath).exists()) {
        String version = getFlatVersion(flatExePath)
        println('server flatc version: ' + version)
        if ('2.0.0' == version) {
            flatcPath = flatExePath
            return
        } else {
            println('the version of " + flatExePath " is not valid, try to find flac from server deps')
        }
    } else {
        println('no env FLAT_EXE_PATH set, try to find flac from server deps')
    }

    String serFlatPath = projectDir.path + "/../../build/mindspore_federated/_deps/flatbuffers-src/_build/flatc"
    if (file(serFlatPath).exists()) {
        String version = getFlatVersion(serFlatPath)
        println('server flatc version: ' + version)
        if ('2.0.0' == version) {
            flatcPath = serFlatPath
        } else {
            println('the version of build flatc is not valid, find flatc failed..')
        }
    } else {
        println("the needed flatc of version 2.0.0 is not exist, please check")
    }
    println("the used flatc path: " + flatcPath)
}

task createFlatBuffers(type: FlatBuffers) {
    inputDir = file("../schema")
    outputDir = file("src/main/java/")
    language = 'java'
    extraArgs = "--gen-mutable"
}

def getCommitID() {
    def out = new ByteArrayOutputStream();
    exec {
        commandLine 'git', 'rev-parse', 'HEAD'
        standardOutput = out
    }
    println("the used commit_id: " + out.toString())
    return out.toString().trim()
}

version = '0.1.0'
archivesBaseName = 'mindspore-lite-java-flclient'
def commitID = getCommitID()

task packFLJarAAR(type: Jar, dependsOn: ['compileJava']) {
    doFirst {
        delete('build/libs/jarAAR/' + archivesBaseName + '-' + version + '.jar')
    }
    manifest {
        attributes(
                "Main-Class": "com.mindspore.flclient.SyncFLJob",
                "Plateform": "Andriod",
                "CommitID": commitID
        )
    }
    from('build/classes/java/main')
    destinationDirectory = file('build/libs/jarAAR')
    doLast {
        ant.checksum file: "./build/libs/jarAAR/" + archivesBaseName + '-' + version + '.jar',
                algorithm: "sha-256", fileext: ".sha256"
    }
}

task packFLJarX86(type: Jar, dependsOn: ['compileJava']) {
    doFirst {
        delete('build/libs/jarX86/' + archivesBaseName + '-' + version + '.jar')
    }
    println("packFLJarX86 used commit_id: " + getCommitID())
    manifest {
        attributes(
                "Main-Class": "com.mindspore.flclient.SyncFLJob",
                "Plateform": "X86",
                "CommitID": commitID
        )
    }
    from('build/classes/java/main')
    from {
        configurations.compileClasspath.collect {
            if (!it.name.contains("mindspore-lite-java.jar")) {
                it.isDirectory() ? it : zipTree(it)
            }
        }
    }
    destinationDirectory = file('build/libs/jarX86')
    doLast {
        exec {
            commandLine "zip", "-d", "./build/libs/jarX86/" + archivesBaseName + '-' + version + '.jar',
                    'META-INF/.SF', 'META-INF/.RSA', 'META-INF/*SF'
        }
        ant.checksum file: "./build/libs/jarX86/" + archivesBaseName + '-' + version + '.jar',
                algorithm: "sha-256", fileext: ".sha256"
    }
}

task packFLJarX86UT(type: Jar, dependsOn: ['compileTestJava']) {
    manifest {
        attributes(
                "Main-Class": "com.mindspore.flclient.SyncFLJob",
                "Plateform": "X86",
                "CommitID": commitID
        )
    }
    from('build/classes/java/main')
    from('build/classes/java/test')
    from('../common/build/classes/java/main')
    from('../linux_x86/build/classes/java/main')
    from {
        configurations.compileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.testCompileClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    destinationDirectory = file('build/libs/jarX86UT')

    doLast {
        exec {
            commandLine "zip", "-d", "./build/libs/jarX86UT/" + archivesBaseName + '-' + version + '.jar',
                    'META-INF/.SF', 'META-INF/.RSA', 'META-INF/*SF'
        }
    }
}

test {
    // need add the frame lib path to LD_LIBRARY_PATH
    // ref to https://www.mindspore.cn/federated/docs/zh-CN/r1.6/deploy_federated_client.html#id7
    // environment "LD_LIBRARY_PATH", "~/worker/fl_ut/lite/mindspore-lite-1.9.0-linux-x64/runtime/lib"
    // need set MS_FL_UT_BASE_PATH the path of ut_data
    // now ut data on the private repository https://gitee.com/zhangzhaoju/mindspore_fl_test_data
    // environment "MS_FL_UT_BASE_PATH", "~/worker/fl_ut/ut_data"
    // set MS_CATCH_MSG we can using real server to catch msg
    // environment "MS_CATCH_MSG", "True"
    doFirst {
        jvmArgs "-javaagent:${project.configurations.testCompileClasspath.find { it.name.startsWith("jmockit") }}"
    }
    testLogging {
        events "passed", "failed"
    }
    reports { junitXml.outputLocation.set(layout.buildDirectory.dir("ut_test_result")) }
}
